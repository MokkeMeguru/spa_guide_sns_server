openapi: 3.0.3
info:
  title: "SPA Guide: SNS API Server"
  description: the sample of SNS API Server (TOY)
  version: 0.1.1
  termsOfService: https://github.com/MokkeMeguru/spa_guide_sns_server
  contact:
    name: API Server support
    url: https://github.com/MokkeMeguru
    email: meguru.mokke@gmail.com
  license:
    name: MIT
    url: https://github.com/opensource-jp/licenses/blob/dc436911d1f0f150ca66c3f6ff91c60584567933/MIT/MIT.md
servers:
  - url: http://127.0.0.1:3000
    description: local server (run with `npm run start_release`)
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        icon-url:
          type: string
      required:
        - id
        - name
        - icon-url
      description: user information
      title: User
      example:
        id: 6e803bdf-55a7-4a31-849e-8489cc76a457
        name: Meguru Mokke
        icon-url: https://avatars.githubusercontent.com/u/30849444?v=4
    Community:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        details:
          type: string
        category:
          enum:
            - anime
            - geek
            - gurmand
            - sports
          type: string
        image-url:
          type: string
      required:
        - id
        - name
        - details
        - category
        - image-url
      description: community information
      title: Community
      example:
        id: f61f5f38-174b-43e1-8873-4f7cdbee1c18
        name: 辛いものの部
        details: 辛いものが好きな人集まれー
        category: gurmand
        image-url: https://picsum.photos/id/292/{width}/{height}.jpg
    Error:
      type: object
      properties:
        code:
          type: integer
          format: int64
        message:
          type: string
      required:
        - code
        - message
      title: Error
paths:
  /test:
    get:
      operationId: getTest
      tags:
        - test
      responses:
        "200":
          description: pong
          content:
            application/json:
              schema:
                example: "Hello : User"
      parameters:
        - name: name
          in: query
          description: ""
          required: true
          schema:
            type: string
  "/users/{id}":
    get:
      operationId: getUser
      tags:
        - user
      responses:
        "200":
          description: find a user
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/User"
        "404":
          description: user is not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      parameters:
        - name: id
          in: path
          description: ""
          required: true
          schema:
            type: string
